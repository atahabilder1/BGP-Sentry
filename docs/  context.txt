BGP-Sentry Project Knowledge Base - Comprehensive Context
Project Overview
BGP-Sentry is a distributed blockchain simulation for BGP (Border Gateway Protocol) security analysis. It implements a proof-of-population consensus network where RPKI nodes validate BGP announcements and write validated data to individual blockchain copies through peer-to-peer communication.
Core Architecture
Distributed System Design

9 RPKI nodes representing autonomous systems (AS01, AS03, AS05, AS07, AS09, AS11, AS13, AS15, AS17)
Proof-of-population consensus: Each RPKI node gets one vote, requires 3+ votes to write to blockchain
True peer-to-peer architecture: No central authority, direct TCP socket communication between nodes
Individual blockchain copies: Each node maintains its own blockchain with synchronization

Two-Service Architecture Per Node

RPKIObserverService:

Reads BGP data from network_stack/bgpd.json
Validates RPKI vs non-RPKI announcements
Creates blockchain transactions for validation results
Broadcasts transactions to peer nodes via P2P network


ConsensusService:

Listens for transaction requests from other nodes
Validates incoming transactions (signatures, trust scores)
Sends approval/rejection votes back to requesting nodes
Maintains consensus voting records



P2P Communication System

TCP Server per node: Each AS runs server on port 8000 + AS_number (e.g., AS01 on port 8001)
Direct peer connections: Nodes connect directly to each other using hardcoded peer discovery
Message types: vote_request (transaction proposal), vote_response (approval/rejection)
No central coordinator: Fully decentralized blockchain network simulation

Directory Structure
BGP-Sentry/
├── main_experiment.py                    # Main orchestrator
├── simulation_helpers/                   # Time sync and coordination
│   ├── timing/
│   │   ├── shared_clock.py              # Global simulation clock
│   │   └── time_synchronizer.py         # Node time synchronization
│   ├── coordination/orchestrator.py     # Node process management
│   └── shared_data/experiment_config.json
├── nodes/
│   ├── rpki_nodes/
│   │   ├── shared_blockchain_stack/      # Shared services and utilities
│   │   │   ├── services/
│   │   │   │   ├── rpki_observer_service/observer_main.py
│   │   │   │   └── consensus_service/consensus_main.py
│   │   │   └── blockchain_utils/
│   │   │       ├── blockchain_interface.py
│   │   │       └── p2p_transaction_pool.py
│   │   ├── as01/blockchain_node/
│   │   │   ├── node.py                   # Main P2P blockchain node
│   │   │   ├── blockchain_data/
│   │   │   │   ├── chain/blockchain.json # Individual blockchain copy
│   │   │   │   ├── transaction_pool/     # Local transaction pool
│   │   │   │   └── shared_registry/      # Public keys, RPKI data
│   │   │   └── network_stack/bgpd.json   # BGP observation data
│   │   └── [as03, as05, ... as17]       # Similar structure for each AS
│   └── non_rpki_nodes/                   # Non-RPKI AS nodes
└── bgp_feed/mininet_logs/               # BGP simulation data source
Data Flow and Consensus Process
BGP Processing Workflow

Observation: Each AS node reads BGP announcements from its network_stack/bgpd.json
Validation: Node checks if announcement is RPKI-validated or requires blockchain consensus
Transaction Creation: For non-RPKI announcements, node creates signed blockchain transaction
P2P Broadcast: Node sends transaction to all 8 peer nodes via TCP sockets
Peer Validation: Each peer validates transaction and sends approve/reject vote
Consensus Check: Originating node collects votes; 3+ approvals trigger blockchain write
Blockchain Update: Approved transaction written to node's local blockchain copy

P2P Communication Protocol
json// Vote Request (AS01 → AS03)
{
  "type": "vote_request",
  "from_as": 1,
  "transaction": {
    "transaction_id": "tx_1758882874",
    "observer_as": 1,
    "bgp_data": {...},
    "signature": "..."
  },
  "timestamp": "2025-09-26T06:34:34Z"
}

// Vote Response (AS03 → AS01)
{
  "type": "vote_response", 
  "from_as": 3,
  "transaction_id": "tx_1758882874",
  "vote": "approve",  // or "reject"
  "timestamp": "2025-09-26T06:34:35Z"
}
BGP Data Format
Each node processes BGP announcements in this format:
json{
  "metadata": {
    "observer_asn": 1,
    "generation_timestamp": "2025-08-04T12:56:11Z",
    "total_announcements": 10
  },
  "bgp_announcements": [
    {
      "sender_asn": 12,
      "prefix": "203.0.113.0/24", 
      "as_path": [65001],
      "next_hop": "10.0.0.1",
      "timestamp": 1752874471,
      "type": "announce",
      "wallet_address": "0xBcd4..."  // Indicates non-RPKI if present
    }
  ]
}
Current Implementation Status
Working Components

Main orchestrator with health monitoring and experiment management
Node process management and lifecycle coordination
Time synchronization system (not yet integrated with BGP processing)
Real blockchain services (RPKIObserverService, ConsensusService) with fallback mechanisms
P2P transaction pool with TCP socket communication
File-based blockchain storage with proper block structure and integrity checks

P2P Network Architecture

Individual transaction pools: Each node maintains its own pending transactions
Direct peer communication: TCP servers on ports 8001, 8003, 8005, 8007, 8009, 8011, 8013, 8015, 8017
Hardcoded peer discovery: Nodes know addresses of all other 8 nodes
Real-time voting: Immediate vote collection rather than batched consensus rounds

Current Behavior
Each node successfully:

Starts TCP server for P2P communication
Loads and processes BGP announcements every 30 seconds
Creates blockchain transactions with unique IDs
Uses fallback transaction submission (services not fully connected to P2P pool yet)
Maintains separate blockchain copies per node

Configuration
Located in simulation_helpers/shared_data/experiment_config.json:

Simulation duration: 50 seconds
Processing interval: 5 seconds
Expected nodes: 9
Consensus threshold: 33% (3/9 nodes minimum)
BGP monitoring: 30-second intervals

Technical Implementation Details
Consensus Mechanism

Proof-of-population: One vote per RPKI node, no weighting by stake
Minimum threshold: 3 out of 9 nodes must approve
Immediate voting: No batched consensus rounds
Direct validation: Nodes vote based on signature verification and trust scores

Blockchain Storage

Individual copies: Each node stores blockchain in blockchain_data/chain/blockchain.json
Thread-safe operations: File locking prevents concurrent write conflicts
Block structure: Includes transactions, hashes, merkle roots, previous block references
BGP event logging: Transactions logged to bgp_stream.jsonl for analysis

Service Integration Status

Import paths: Fixed for shared service components
Fallback mechanisms: Services use fallback classes when dependencies missing
P2P integration: New P2P transaction pool created but not fully integrated with existing services
Time synchronization: Available but not connected to BGP processing workflow

Known Issues and Next Steps
Current Limitations

Service integration: RPKIObserverService and ConsensusService not yet using P2P transaction pool
Time synchronization: BGP processing not synchronized across nodes via shared clock
Missing dependencies: Some blockchain utilities still using fallback implementations
Clock registration: Nodes not registering with shared simulation clock

Immediate Next Steps

Connect P2P pool to services: Update observer and consensus services to use P2PTransactionPool
Integrate time synchronization: Use BGPTimeWindowManager for coordinated BGP processing
Fix remaining imports: Resolve transaction_pool and other utility imports
Test real P2P voting: Verify nodes can successfully vote on each other's transactions

Future Enhancements

Chain synchronization: Implement blockchain fork resolution between nodes
Attack detection: Integrate existing BGP attack detection components
Performance optimization: Optimize P2P message passing and blockchain writes
Real RPKI validation: Replace simplified validation with actual RPKI checks

Running the Simulation
bash# Activate virtual environment
source venv310/bin/activate

# Start distributed P2P blockchain simulation
python3 main_experiment.py

# Results saved to results/ with experiment summaries and health reports
The simulation creates a true peer-to-peer blockchain network with 9 independent nodes, each running TCP servers, processing BGP data, and participating in distributed consensus voting. This represents a sophisticated implementation of distributed blockchain consensus specifically designed for BGP security validation.